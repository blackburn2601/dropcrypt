{% extends 'base.html.twig' %}

{% block title %}View Message{% endblock %}

{% block body %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-2xl mx-auto">
        <div class="bg-white shadow-md rounded-lg p-6">
            <div id="loading" class="text-center py-8">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
                <p class="mt-4 text-gray-600">Loading message...</p>
            </div>

            <div id="error" class="hidden">
                <div class="bg-red-50 border-l-4 border-red-400 p-4">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-red-700" id="errorMessage"></p>
                        </div>
                    </div>
                </div>
            </div>

            <div id="message" class="hidden">
                <div class="prose max-w-none">
                    <p id="messageContent" class="whitespace-pre-wrap"></p>
                </div>
                <div class="mt-6 text-sm text-gray-500">
                    <p>This message will be deleted after viewing.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="{{ asset('js/encryption.js') }}"></script>
<script>
document.addEventListener('DOMContentLoaded', async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const key = urlParams.get('key');

    if (!key) {
        showError('Encryption key is missing');
        return;
    }

    try {
        // Import the key
        const importedKey = await MessageEncryption.importKey(key);
        
        // Hash the key for verification
        const keyHash = await MessageEncryption.hashKey(key);

        // Fetch the message
        const response = await fetch(`/message/api/{{ message.accessToken }}?keyHash=${encodeURIComponent(keyHash)}`);
        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.error || 'Failed to load message');
        }

        // Decrypt the message
        const decryptedContent = await MessageEncryption.decrypt(data.content, importedKey);

        // Show the message
        document.getElementById('messageContent').textContent = decryptedContent;
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('message').classList.remove('hidden');
    } catch (error) {
        console.error('Error:', error);
        showError(error.message);
    }
});

function showError(message) {
    document.getElementById('errorMessage').textContent = message;
    document.getElementById('loading').classList.add('hidden');
    document.getElementById('error').classList.remove('hidden');
}
</script>
{% endblock %} 