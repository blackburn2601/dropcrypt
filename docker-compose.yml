services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./backend/public:/var/www/public
      - ./frontend/build:/var/www/html
    depends_on:
      frontend:
        condition: service_completed_successfully
      php:
        condition: service_healthy
    networks:
      - dropcrypt-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 3s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run build

  php:
    build:
      context: ./backend
      dockerfile: docker/php/Dockerfile
    volumes:
      - ./backend:/var/www
      - /var/www/vendor/
      - ./backend/.env:/var/www/.env:ro
    environment:
      - APP_ENV=${APP_ENV:-dev}
      - APP_SECRET=${APP_SECRET:-2ca64f8d83b9e89f5f19d672841d6bb8}
      - DATABASE_URL=postgresql://${DB_USER:-dropcrypt}:${DB_PASSWORD:-dropcrypt}@postgres:5432/${DB_NAME:-dropcrypt}?serverVersion=15&charset=utf8
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dropcrypt-network
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-dropcrypt}
      POSTGRES_USER: ${DB_USER:-dropcrypt}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dropcrypt}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dropcrypt}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dropcrypt-network

networks:
  dropcrypt-network:
    driver: bridge

volumes:
  postgres_data: 